{"version":3,"sources":["components/Counter.js","components/Stats.js","components/Stopwatch.js","components/Header.js","components/Icon.js","components/Player.js","components/AddPlayerForm.js","components/App.js","serviceWorker.js","index.js"],"names":["Counter","index","score","changeScore","className","onClick","PropTypes","players","arrayOf","shape","number","Stats","props","totalPlayers","length","totalPoints","reduce","total","player","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","now","Date","setState","prevState","handleStopwatch","handleReset","this","intervalID","setInterval","clearInterval","seconds","Math","floor","Component","Header","title","defaultProps","Icon","isHighScore","viewBox","d","transform","width","height","Player","name","id","removePlayer","PureComponent","AddPlayerForm","playerInput","React","createRef","handleSubmit","e","preventDefault","addPlayer","current","value","currentTarget","reset","onSubmit","type","ref","placeholder","App","prevPlayerId","handleScoreChange","delta","handleAddPlayer","newPlayer","concat","handleRemovePlayer","filter","p","getHighScore","scores","map","highScore","max","key","toString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6c961a36.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst Counter = ({ index, score, changeScore }) => {\r\n\r\n  return (\r\n    <div className=\"counter\">\r\n      <button className=\"counter-action decrement\" onClick={() => changeScore(index, -1)}> - </button>\r\n      <span className=\"counter-score\">{score}</span>\r\n      <button className=\"counter-action increment\" onClick={() => changeScore(index, 1)}> + </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCounter.propTypes = {\r\n  index: PropTypes.number,\r\n  score: PropTypes.number,\r\n  changeScore: PropTypes.func\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Counter from \"./Counter\";\r\n\r\nconst Stats = (props) => {\r\n\r\n  const totalPlayers = props.players.length;\r\n  const totalPoints = props.players.reduce((total, player) => {\r\n    return total + player.score;\r\n  }, 0);\r\n\r\n  return (\r\n    <table className=\"stats\">\r\n      <tbody>\r\n        <tr>\r\n          <td>Players:</td>\r\n          <td>{totalPlayers}</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Total Points:</td>\r\n          <td>{totalPoints}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nCounter.PropTypes = {\r\n  players: PropTypes.arrayOf(PropTypes.shape({\r\n    score: PropTypes.number\r\n  }))\r\n}\r\n\r\nexport default Stats;\r\n","import React, {Component} from 'react';\r\n\r\nclass Stopwatch extends Component {\r\n\r\n\tstate = {\r\n\t\tisRunning: false,\r\n\t\telapsedTime: 0,\r\n\t\tpreviousTime: 0,\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.intervalID = setInterval(() => this.tick(), 100);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.intervalID);\r\n\t}\r\n\r\n\ttick = () => {\r\n\t\tif (this.state.isRunning) {\r\n\t\t\tconst now = Date.now();\r\n\t\t\tthis.setState( prevState => ({\r\n\t\t\t\tpreviousTime: now,\r\n\t\t\t\telapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\r\n\t\t\t}));\r\n\t\t}\r\n\t}\r\n\r\n\thandleStopwatch = () => {\r\n\t\tthis.setState( prevState => ({\r\n\t\t\tisRunning: !prevState.isRunning\r\n\t\t}));\r\n\t\tif (!this.state.isRunning) {\r\n\t\t\tthis.setState({ previousTime: Date.now()})\r\n\t\t}\r\n\t}\r\n\r\n\thandleReset = () => {\r\n\t\tthis.setState({elapsedTime: 0});\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst seconds = Math.floor(this.state.elapsedTime / 1000);\r\n\t\treturn (\r\n\t\t\t<div className=\"stopwatch\">\r\n\t\t\t\t<h2>Stopwatch</h2>\r\n\t\t\t\t<span className=\"stopwatch-time\">\r\n\t\t\t\t\t{seconds}\r\n\t\t\t\t</span>\r\n\t\t\t\t<button onClick={this.handleStopwatch}>\r\n\t\t\t\t\t{this.state.isRunning ? 'Stop' : 'Start'}\r\n\t\t\t\t</button>\r\n\t\t\t\t<button onClick={this.handleReset}>Reset</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Stopwatch;","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Stats from './Stats';\r\nimport Stopwatch from './Stopwatch';\r\n\r\nconst Header = ({ players, title }) => {\r\n  return (\r\n    <header>\r\n      <Stats players={players} />\r\n      <h1>{title}</h1>\r\n      <Stopwatch />\r\n    </header>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string,\r\n  players: PropTypes.arrayOf(PropTypes.object)\r\n}\r\n\r\nHeader.defaultProps = {\r\n  title: 'Scoreboard'\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Icon = (props) => {\r\n\treturn(\r\n\t\t<svg className={ props.isHighScore ? 'is-high-score' : null } viewBox=\"0 0 44 35\">\r\n\t\t\t<path d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\" transform=\"translate(0 0.301727)\"/>\r\n\t\t\t<rect width=\"30.4986\" height=\"3.07759\" transform=\"translate(6.56987 31.5603)\"/>\r\n\t\t</svg>\r\n\t);\r\n};\r\n\r\nIcon.propTypes = {\r\n  isHighScore: PropTypes.bool\r\n};\r\n\r\nexport default Icon;\r\n","import React, {PureComponent} from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport Counter from \"./Counter\";\r\nimport Icon from './Icon';\r\n\r\nclass Player extends PureComponent {\r\n\r\n  static propTypes = {\r\n    changeScore: PropTypes.func,\r\n    removePlayer: PropTypes.func,\r\n    name: PropTypes.string.isRequired,\r\n    score: PropTypes.number.isRequired,\r\n    id: PropTypes.number,\r\n    index: PropTypes.number,\r\n    isHighScore: PropTypes.bool\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      name,\r\n      id,\r\n      score,\r\n      index,\r\n      removePlayer,\r\n      changeScore\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"player\">\r\n        <span className=\"player-name\">\r\n          <button\r\n            className=\"remove-player\"\r\n            onClick={() => removePlayer(id)}\r\n          >\r\n            âœ–\r\n          </button>\r\n          <Icon isHighScore={this.props.isHighScore} />\r\n          {name}\r\n        </span>\r\n        <Counter\r\n          score={score}\r\n          index={index}\r\n          changeScore={changeScore}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nexport default Player;\r\n","import React, { Component } from \"react\";\r\n\r\nclass AddPlayerForm extends Component {\r\n  playerInput = React.createRef();\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.addPlayer(this.playerInput.current.value);\r\n    e.currentTarget.reset();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          ref={this.playerInput}\r\n          placeholder=\"Enter a player's name\"\r\n        />\r\n\r\n        <input type=\"submit\" value=\"Add Player\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddPlayerForm;\r\n","import React, {Component} from \"react\";\nimport Header from \"./Header\";\nimport Player from \"./Player\";\nimport AddPlayerForm from './AddPlayerForm';\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    players: [\n      {\n        name: \"Guil\",\n        id: 1,\n        score: 0\n      },\n      {\n        name: \"Treasure\",\n        id: 2,\n        score: 0\n      },\n      {\n        name: \"Ashley\",\n        id: 3,\n        score: 0\n      },\n      {\n        name: \"James\",\n        id: 4,\n        score: 0\n      }\n    ]\n  };\n\n  // player id counter\n  prevPlayerId = 4;\n\n  handleScoreChange = (index, delta) => {\n    this.setState(prevState => ({\n      score: prevState.players[index].score += delta\n    }));\n  };\n\n  handleAddPlayer = (name) => {\n    let newPlayer = {\n      name,\n      score: 0,\n      id: this.prevPlayerId += 1\n    };\n    this.setState( prevState => ({\n      players: prevState.players.concat(newPlayer)\n    }));\n  }\n\n  handleRemovePlayer = id => {\n    this.setState(prevState => {\n      return {\n        players: prevState.players.filter(p => p.id !== id)\n      };\n    });\n  };\n\n  getHighScore = () => {\n    const scores = this.state.players.map( p => p.score );\n    const highScore = Math.max(...scores);\n    if (highScore) {\n      return highScore;\n    }\n    return null;\n  }\n\n  render() {\n    const highScore = this.getHighScore();\n\n    return (\n      <div className=\"scoreboard\">\n        <Header\n          players={this.state.players}\n        />\n\n        {/* Players list */}\n        {this.state.players.map( (player, index) =>\n          <Player\n            id={player.id}\n            name={player.name}\n            score={player.score}\n            key={player.id.toString()}\n            index={index}\n            changeScore={this.handleScoreChange}\n            removePlayer={this.handleRemovePlayer}\n            isHighScore={highScore === player.score}\n          />\n        )}\n\n        <AddPlayerForm addPlayer={this.handleAddPlayer}/>\n\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './components/App.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}